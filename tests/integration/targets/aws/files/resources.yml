resources:
  s3_bucket_1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "{{ tiny_prefix }}-s3-bucket-1"
      Tags:
        - Key: bucket
          Value: resource:s3_bucket_2.Properties.Arn

  s3_bucket_2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "{{ tiny_prefix }}-s3-bucket-2"
      Tags:
        - Key: otherbucket
          Value: resource:s3_bucket_3.Properties.Arn

  s3_bucket_3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "{{ tiny_prefix }}-s3-bucket-3"

  s3_access_point:
    Type: AWS::S3::AccessPoint
    Properties:
      Bucket: resource:s3_bucket_1.Properties.BucketName
      Name: "{{ tiny_prefix }}-s3-ap-1"

  iam_role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "ansible-test-{{ tiny_prefix }}"
      Description: pravic iam role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                  - lambda.amazonaws.com

  lambda_function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "{{ tiny_prefix }}-lambda-1"
      Runtime: nodejs16.x
      Handler: index.handler
      Description: Invoke a function during stack creation.
      Code:
        ZipFile: |
          var aws = require('aws-sdk')
          var response = require('cfn-response')
          exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
              // For Delete requests, immediately send a SUCCESS response.
              if (event.RequestType == "Delete") {
                  response.send(event, context, "SUCCESS")
                  return
              }
              var responseStatus = "FAILED"
              var responseData = {}
              var functionName = event.ResourceProperties.FunctionName
              var lambda = new aws.Lambda()
              lambda.invoke({ FunctionName: functionName }, function(err, invokeResult) {
                  if (err) {
                      responseData = {Error: "Invoke call failed"}
                      console.log(responseData.Error + ":\n", err)
                  }
                  else responseStatus = "SUCCESS"
                  response.send(event, context, responseStatus, responseData)
              })
          }
      Role: resource:iam_role.Properties.Arn
      TracingConfig:
        Mode: Active

  s3_object_lambda_access_point:
    Type: AWS::S3ObjectLambda::AccessPoint
    Properties:
      Name: "{{ tiny_prefix }}-lambda-ap-1"
      ObjectLambdaConfiguration:
        SupportingAccessPoint: resource:s3_access_point.Properties.Arn
        TransformationConfigurations:
          - Actions:
              - "GetObject"
            ContentTransformation:
              AwsLambda:
                FunctionArn: resource:lambda_function.Properties.Arn
